// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testrpc.proto

package testproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RPCRequest struct {
	Seq              *uint64 `protobuf:"varint,1,req,name=seq" json:"seq,omitempty"`
	Method           *string `protobuf:"bytes,2,req,name=method" json:"method,omitempty"`
	Arg              []byte  `protobuf:"bytes,3,opt,name=arg" json:"arg,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RPCRequest) Reset()                    { *m = RPCRequest{} }
func (m *RPCRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCRequest) ProtoMessage()               {}
func (*RPCRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RPCRequest) GetSeq() uint64 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return 0
}

func (m *RPCRequest) GetMethod() string {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return ""
}

func (m *RPCRequest) GetArg() []byte {
	if m != nil {
		return m.Arg
	}
	return nil
}

type RPCResponse struct {
	Seq              *uint64 `protobuf:"varint,1,req,name=seq" json:"seq,omitempty"`
	Err              *string `protobuf:"bytes,2,req,name=err" json:"err,omitempty"`
	Ret              []byte  `protobuf:"bytes,3,opt,name=ret" json:"ret,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RPCResponse) Reset()                    { *m = RPCResponse{} }
func (m *RPCResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCResponse) ProtoMessage()               {}
func (*RPCResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RPCResponse) GetSeq() uint64 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return 0
}

func (m *RPCResponse) GetErr() string {
	if m != nil && m.Err != nil {
		return *m.Err
	}
	return ""
}

func (m *RPCResponse) GetRet() []byte {
	if m != nil {
		return m.Ret
	}
	return nil
}

type Hello struct {
	Hello            *string `protobuf:"bytes,1,req,name=hello" json:"hello,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Hello) Reset()                    { *m = Hello{} }
func (m *Hello) String() string            { return proto.CompactTextString(m) }
func (*Hello) ProtoMessage()               {}
func (*Hello) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Hello) GetHello() string {
	if m != nil && m.Hello != nil {
		return *m.Hello
	}
	return ""
}

type World struct {
	World            *string `protobuf:"bytes,1,req,name=world" json:"world,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *World) Reset()                    { *m = World{} }
func (m *World) String() string            { return proto.CompactTextString(m) }
func (*World) ProtoMessage()               {}
func (*World) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *World) GetWorld() string {
	if m != nil && m.World != nil {
		return *m.World
	}
	return ""
}

func init() {
	proto.RegisterType((*RPCRequest)(nil), "testproto.RPCRequest")
	proto.RegisterType((*RPCResponse)(nil), "testproto.RPCResponse")
	proto.RegisterType((*Hello)(nil), "testproto.hello")
	proto.RegisterType((*World)(nil), "testproto.world")
}

func init() { proto.RegisterFile("testrpc.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8c, 0xb1, 0x0a, 0xc2, 0x40,
	0x0c, 0x86, 0x69, 0xab, 0x42, 0xa3, 0x42, 0x39, 0x44, 0xba, 0x08, 0xa5, 0x53, 0x27, 0x5f, 0xa2,
	0x8b, 0xa3, 0xe4, 0x0d, 0xc4, 0x06, 0x3b, 0x54, 0x73, 0xcd, 0x45, 0x7c, 0x7d, 0xc9, 0x79, 0xdd,
	0xdc, 0xbe, 0x2f, 0x7f, 0xf8, 0x60, 0xaf, 0x14, 0x54, 0xfc, 0xfd, 0xec, 0x85, 0x95, 0x5d, 0x69,
	0x1a, 0xb1, 0xbd, 0x00, 0xe0, 0xb5, 0x47, 0x9a, 0xdf, 0x14, 0xd4, 0x55, 0x50, 0x04, 0x9a, 0xeb,
	0xac, 0xc9, 0xbb, 0x15, 0x1a, 0xba, 0x23, 0x6c, 0x9e, 0xa4, 0x23, 0x0f, 0x75, 0xde, 0xe4, 0x5d,
	0x89, 0xc9, 0xec, 0xf3, 0x26, 0x8f, 0xba, 0x68, 0xb2, 0x6e, 0x87, 0x86, 0x6d, 0x0f, 0xdb, 0x58,
	0x0a, 0x9e, 0x5f, 0x81, 0xfe, 0xa4, 0x2a, 0x28, 0x48, 0x24, 0x75, 0x0c, 0xed, 0x22, 0xa4, 0x4b,
	0x44, 0x48, 0xdb, 0x13, 0xac, 0x47, 0x9a, 0x26, 0x76, 0x87, 0x04, 0x31, 0x50, 0xe2, 0x4f, 0x6c,
	0xfe, 0xb0, 0x4c, 0x83, 0xcd, 0x11, 0x96, 0x39, 0xca, 0x37, 0x00, 0x00, 0xff, 0xff, 0x45, 0x15,
	0xe2, 0xf2, 0xe7, 0x00, 0x00, 0x00,
}
